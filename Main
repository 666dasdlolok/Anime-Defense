local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua'))()

local Window = Rayfield:CreateWindow({
    Name = "Anime Defense Simulator",
    LoadingTitle = "Anime Defense Simulator",
    LoadingSubtitle = "by Verny Hub",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = "Verny Hub V2", -- Create a custom folder for your hub/game
       FileName = "Verny Hub AFS3"
    },
    Discord = {
       Enabled = false,
       Invite = "sirius", -- The Discord invite code, do not include discord.gg/
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Sirius Hub",
       Subtitle = "Key System",
       Note = "Join the discord (discord.gg/sirius)",
       FileName = "SiriusKey",
       SaveKey = true,
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = "Hello"
    }
 })

 local Tab = Window:CreateTab("Main", 4483362458) -- Title, Image

 local vu = game:GetService("VirtualUser")
 game:GetService("Players").LocalPlayer.Idled:connect(function()
 vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
 wait(1)
 vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
 end)

local Section = Tab:CreateSection("Select Map")

_G.yes = true;

local Dropdown = Tab:CreateDropdown({
   Name = "Select Map",
   Options = {"Demon Slayer", "Narute","Blearch", "OPM", "Namek"},
   CurrentOption = " ",
   Flag = "selMap", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Option)
      _G.selMap = Option;
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Join",
   Info = "Will Auto Join Selected Map", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "autoJoin", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      _G.autoJoin = Value;
   end,
})

task.spawn(function()
   while wait() do
      if _G.autoJoin and _G.selMap ~= nil then
         if _G.yes then
            pcall(function()
               for i,v in ipairs(game:GetService("Workspace").Client.Rooms:GetChildren()) do
                  if v.Frame.UI_Interface.Frame.TeleportFrame.UID.Text == "Waiting For Players." then
                     game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
                     wait()
                        firesignal(game:GetService("Players").LocalPlayer.PlayerGui.UI.Client.Modules.InteractSettings.InteractFrame.Frame.TextButton.MouseButton1Click)
                        wait()
                           local args = {
                              [1] = {
                                 [1] = "MapSelect",
                                 [2] = _G.selMap}}
                           game:GetService("ReplicatedStorage").Remotes.Server:FireServer(unpack(args))
                     wait()
                     _G.yes = false;
                  end
               end
            end)
         end
      end
   end
end)


local Tab = Window:CreateTab("Auto Summon", 4483362458) -- Title, Image

local Dropdown = Tab:CreateDropdown({
   Name = "Select Map For Auto Summon",
   Options = {"Demon Slayer", "Narute","Blearch", "OPM", "Namek"},
   CurrentOption = " ",
   Flag = "selMap", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Option)
      _G.selMap2 = Option;
   end,
})



local Toggle = Tab:CreateToggle({
   Name = "Auto Summon 1X",
   Info = "Will Auto Summon 1X times", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "autoSummon1x", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      _G.autoSummon1x = Value;
   end,
})

task.spawn(function()
   while wait() do
      if _G.autoSummon1x then
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Client.Interact["Summon Shop"].CFrame
         wait()
            local args = {
               [1] = {
                  [1] = "TierBuy",
                  [2] = _G.selMap2,
                  [3] = "E",
                  [4] = {}}}
            game:GetService("ReplicatedStorage").Remotes.Server:FireServer(unpack(args))
         wait()
      end
   end
end)


local Toggle = Tab:CreateToggle({
   Name = "Auto Summon 3X",
   Info = "Will Auto Summon 3X times", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "autoSummon3x", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      _G.autoSummon3x = Value;
   end,
})

task.spawn(function()
   while wait() do
      if _G.autoSummon3x then
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Client.Interact["Summon Shop"].CFrame
         wait()
            local args = {
               [1] = {
                  [1] = "TierBuy",
                  [2] = _G.selMap2,
                  [3] = "R",
                  [4] = {}}}
            game:GetService("ReplicatedStorage").Remotes.Server:FireServer(unpack(args))
         wait()
      end
   end
end)


local Tab = Window:CreateTab("Local Player", 4483362458) -- Title, Image




local Slider = Tab:CreateSlider({
	Name = "Change WalkSpeed",
	Range = {50, 500},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = 50,
	Flag = "WalkSpeed", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.ws = Value;
	end,
})

local Toggle = Tab:CreateToggle({
	Name = "Toggle WalkSpeed",
	CurrentValue = false,
	Flag = "wsToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.wsToggle = Value;
	end,
})

task.spawn(function()
	while wait() do
		if _G.wsToggle and _G.ws ~= nil then
			pcall(function()
			game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.ws
			end)
		end
	end
end)

local Slider = Tab:CreateSlider({
	Name = "Change Jumppower",
	Range = {50, 500},
	Increment = 1,
	Suffix = "Jumppower",
	CurrentValue = 50,
	Flag = "Jumppower", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.js = Value;
	end,
})

local Toggle = Tab:CreateToggle({
	Name = "Toggle Jumppower",
	CurrentValue = false,
	Flag = "jsToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.jsToggle = Value;
	end,
})

task.spawn(function()
	while wait() do
		if _G.jsToggle and _G.js ~= nil then
			pcall(function()
			game.Players.LocalPlayer.Character.Humanoid.JumpPower = _G.js
			end)
		end
	end
end)

local Slider = Tab:CreateSlider({
	Name = "Change FOV(Field Of View)",
	Range = {1, 120},
	Increment = 1,
	Suffix = "FOV",
	CurrentValue = 70,
	Flag = "FOV", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.FOV = Value;
	end,
})

local Toggle = Tab:CreateToggle({
	Name = "Toggle FOV",
	CurrentValue = false,
	Flag = "fovToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.fovToggle = Value;
	end,
})

task.spawn(function()
	while wait() do
		if _G.fovToggle and _G.FOV ~= nil then
			pcall(function()
                game:GetService("Workspace").Camera.FieldOfView = _G.FOV
			end)
		end
	end
end)


local Tab = Window:CreateTab("Auto Attack", 4483362458) -- Title, Image

local Section = Tab:CreateSection("Auto Attack")

local mobs = game:GetService("Workspace").Client:WaitForChild("Mobs")

local Toggle = Tab:CreateToggle({
   Name = "Auto Attack Mobs",
   CurrentValue = false,
   Flag = "autoAttack1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      _G.autoAttack1 = Value;
   end,
})


task.spawn(function()
   while wait() do
      if _G.autoAttack1 then
         for i,v in ipairs(mobs:GetChildren()) do
            pcall(function()
               if v:IsA("Model") then
                  repeat
                     if v.Humanoid.Health > 0 then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame
                        wait()
                        local args = {
                           [1] = {
                              [1] = "MobAttack",
                              [2] = {
                                 [v.Name] = true}}}
                        game:GetService("ReplicatedStorage").Remotes.Server:FireServer(unpack(args))
                        wait()
                       end 
                  until v.Humanoid.Health == 0
               end
            end)
         end
      end
   end
end)



local Toggle = Tab:CreateToggle({
   Name = "Auto Attack Normal",
   CurrentValue = false,
   Flag = "autoAttack2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      _G.autoAttack2 = Value;
   end,
})

task.spawn(function()
   while wait() do
      if _G.autoAttack2 then
         local args = {
            [1] = {
               [1] = "MobAttack",
               [2] = {}}}
         game:GetService("ReplicatedStorage").Remotes.Server:FireServer(unpack(args))
         wait()
      end
   end
end)


Rayfield:LoadConfiguration()
